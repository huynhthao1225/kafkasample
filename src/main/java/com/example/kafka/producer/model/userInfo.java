/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.producer.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class userInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2309013272071062672L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"userInfo\",\"namespace\":\"com.example.kafka.producer.model\",\"fields\":[{\"name\":\"username\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"age\",\"type\":\"int\",\"default\":-1},{\"name\":\"phone\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"housenum\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"street\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"city\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"state_province\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"country\",\"type\":\"string\",\"default\":\"NONE\"},{\"name\":\"zip\",\"type\":\"string\",\"default\":\"NONE\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<userInfo> ENCODER =
      new BinaryMessageEncoder<userInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<userInfo> DECODER =
      new BinaryMessageDecoder<userInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<userInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<userInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<userInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this userInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a userInfo from a ByteBuffer. */
  public static userInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence username;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence phone;
  @Deprecated public java.lang.CharSequence housenum;
  @Deprecated public java.lang.CharSequence street;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence state_province;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence zip;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public userInfo() {}

  /**
   * All-args constructor.
   * @param username The new value for username
   * @param age The new value for age
   * @param phone The new value for phone
   * @param housenum The new value for housenum
   * @param street The new value for street
   * @param city The new value for city
   * @param state_province The new value for state_province
   * @param country The new value for country
   * @param zip The new value for zip
   */
  public userInfo(java.lang.CharSequence username, java.lang.Integer age, java.lang.CharSequence phone, java.lang.CharSequence housenum, java.lang.CharSequence street, java.lang.CharSequence city, java.lang.CharSequence state_province, java.lang.CharSequence country, java.lang.CharSequence zip) {
    this.username = username;
    this.age = age;
    this.phone = phone;
    this.housenum = housenum;
    this.street = street;
    this.city = city;
    this.state_province = state_province;
    this.country = country;
    this.zip = zip;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return age;
    case 2: return phone;
    case 3: return housenum;
    case 4: return street;
    case 5: return city;
    case 6: return state_province;
    case 7: return country;
    case 8: return zip;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: phone = (java.lang.CharSequence)value$; break;
    case 3: housenum = (java.lang.CharSequence)value$; break;
    case 4: street = (java.lang.CharSequence)value$; break;
    case 5: city = (java.lang.CharSequence)value$; break;
    case 6: state_province = (java.lang.CharSequence)value$; break;
    case 7: country = (java.lang.CharSequence)value$; break;
    case 8: zip = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'housenum' field.
   * @return The value of the 'housenum' field.
   */
  public java.lang.CharSequence getHousenum() {
    return housenum;
  }

  /**
   * Sets the value of the 'housenum' field.
   * @param value the value to set.
   */
  public void setHousenum(java.lang.CharSequence value) {
    this.housenum = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return The value of the 'street' field.
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state_province' field.
   * @return The value of the 'state_province' field.
   */
  public java.lang.CharSequence getStateProvince() {
    return state_province;
  }

  /**
   * Sets the value of the 'state_province' field.
   * @param value the value to set.
   */
  public void setStateProvince(java.lang.CharSequence value) {
    this.state_province = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'zip' field.
   * @return The value of the 'zip' field.
   */
  public java.lang.CharSequence getZip() {
    return zip;
  }

  /**
   * Sets the value of the 'zip' field.
   * @param value the value to set.
   */
  public void setZip(java.lang.CharSequence value) {
    this.zip = value;
  }

  /**
   * Creates a new userInfo RecordBuilder.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.producer.model.userInfo.Builder newBuilder() {
    return new com.example.kafka.producer.model.userInfo.Builder();
  }

  /**
   * Creates a new userInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.producer.model.userInfo.Builder newBuilder(com.example.kafka.producer.model.userInfo.Builder other) {
    return new com.example.kafka.producer.model.userInfo.Builder(other);
  }

  /**
   * Creates a new userInfo RecordBuilder by copying an existing userInfo instance.
   * @param other The existing instance to copy.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.producer.model.userInfo.Builder newBuilder(com.example.kafka.producer.model.userInfo other) {
    return new com.example.kafka.producer.model.userInfo.Builder(other);
  }

  /**
   * RecordBuilder for userInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<userInfo>
    implements org.apache.avro.data.RecordBuilder<userInfo> {

    private java.lang.CharSequence username;
    private int age;
    private java.lang.CharSequence phone;
    private java.lang.CharSequence housenum;
    private java.lang.CharSequence street;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state_province;
    private java.lang.CharSequence country;
    private java.lang.CharSequence zip;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.kafka.producer.model.userInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phone)) {
        this.phone = data().deepCopy(fields()[2].schema(), other.phone);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.housenum)) {
        this.housenum = data().deepCopy(fields()[3].schema(), other.housenum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.street)) {
        this.street = data().deepCopy(fields()[4].schema(), other.street);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state_province)) {
        this.state_province = data().deepCopy(fields()[6].schema(), other.state_province);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.zip)) {
        this.zip = data().deepCopy(fields()[8].schema(), other.zip);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing userInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.kafka.producer.model.userInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phone)) {
        this.phone = data().deepCopy(fields()[2].schema(), other.phone);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.housenum)) {
        this.housenum = data().deepCopy(fields()[3].schema(), other.housenum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.street)) {
        this.street = data().deepCopy(fields()[4].schema(), other.street);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state_province)) {
        this.state_province = data().deepCopy(fields()[6].schema(), other.state_province);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.zip)) {
        this.zip = data().deepCopy(fields()[8].schema(), other.zip);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.phone = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'housenum' field.
      * @return The value.
      */
    public java.lang.CharSequence getHousenum() {
      return housenum;
    }

    /**
      * Sets the value of the 'housenum' field.
      * @param value The value of 'housenum'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setHousenum(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.housenum = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'housenum' field has been set.
      * @return True if the 'housenum' field has been set, false otherwise.
      */
    public boolean hasHousenum() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'housenum' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearHousenum() {
      housenum = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreet() {
      return street;
    }

    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.street = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearStreet() {
      street = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.city = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearCity() {
      city = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state_province' field.
      * @return The value.
      */
    public java.lang.CharSequence getStateProvince() {
      return state_province;
    }

    /**
      * Sets the value of the 'state_province' field.
      * @param value The value of 'state_province'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setStateProvince(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.state_province = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state_province' field has been set.
      * @return True if the 'state_province' field has been set, false otherwise.
      */
    public boolean hasStateProvince() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state_province' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearStateProvince() {
      state_province = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'zip' field.
      * @return The value.
      */
    public java.lang.CharSequence getZip() {
      return zip;
    }

    /**
      * Sets the value of the 'zip' field.
      * @param value The value of 'zip'.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder setZip(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.zip = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'zip' field has been set.
      * @return True if the 'zip' field has been set, false otherwise.
      */
    public boolean hasZip() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'zip' field.
      * @return This builder.
      */
    public com.example.kafka.producer.model.userInfo.Builder clearZip() {
      zip = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public userInfo build() {
      try {
        userInfo record = new userInfo();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.phone = fieldSetFlags()[2] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.housenum = fieldSetFlags()[3] ? this.housenum : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.street = fieldSetFlags()[4] ? this.street : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.city = fieldSetFlags()[5] ? this.city : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.state_province = fieldSetFlags()[6] ? this.state_province : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.zip = fieldSetFlags()[8] ? this.zip : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<userInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<userInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<userInfo>
    READER$ = (org.apache.avro.io.DatumReader<userInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
